#include <algorithm>
#include <crails/cli/conventions.hpp>
#include "../../helpers.hpp"
std::string @classname;
std::string @superclass = "public Crails::Odb::Model";
std::string @include = "";
std::map<std::string, std::string>& @properties;
bool @metarecord = false;
// END LINKING
#pragma once
<% if (metarecord) do %>
#include "<%= include %>"
<% end %>
#include <crails/odb/model.hpp>
#include <crails/datatree.hpp>
<%= includes_for_properties(properties) -%>

#pragma db object
class <%= classname %> : <%= superclass %>
{
  odb_instantiable()
public:
<% if (!metarecord) do %>
  static const std::string scope;
  static const std::string plural_scope;
  static const std::string view;
<% end %>

  #pragma db view object(<%= classname %>)
  struct Count
  {
    #pragma db column("count(" + <%= classname %>::id + ")")
    size_t value;
  };

<% if (!metarecord) do %>
  void <%= Crails::naming_convention.functions("edit") %>(Data);
  void <%= Crails::naming_convention.functions("merge_data") %>(Data) const;
  std::string <%= Crails::naming_convention.functions("to_json") %>() const;
  <%= partial("scaffolds/_model_properties.hpp") %>

private:
<% for (auto it = properties.begin() ; it != properties.end() ; ++it) do %>
<%   if (it->second == "Crails::Password") do %>
  std::string <%= it->first %>;
<%   end else do %>
  <%= it->second %> <%= it->first %>;
<%   end %>
<% end %>
<% end %>
};
