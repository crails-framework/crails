#include <csignal>
#include <functional>
#include <chrono>
#include <atomic>
#include <crails/params.hpp>
#include <crails/utils/timer.hpp>
#include <crails/logger.hpp>
#include <crails/sidekix.hpp>
#include <crails/log_files.hpp>
#include <fstream>
#include "ctpl.h"
#include "sidetasks.hpp"

#ifndef THREAD_POOL_SIZE
# define THREAD_POOL_SIZE 2
#endif

using namespace std;
using namespace Crails;

atomic_bool should_continue(true);

static void shutdown(int) { should_continue = false; }

static void run_task(const std::string& type, std::function<void(Params&)> runner, std::shared_ptr<Params> params, int id)
{
  try
  {
    Utils::Timer timer;

    logger << Logger::Info
      << "# Running task of type " << type << " in " << id << Logger::endl;
    runner(*params);
    logger << Logger::Info
      << "# Done (duration: " << timer.GetElapsedSeconds() << "s)"
      << Logger::endl;
  }
  catch (const std::exception& e)
  {
    logger << Logger::Error <<
      "[!] Catched exception: " << e.what() << Logger::endl;
  }
}

static void run_tasks(ctpl::thread_pool& pool, vector<string> tasks)
{
  auto* database = Sidekix::SideTaskDatabase::instance();

  for (auto task_id : tasks)
  {
    auto data = std::make_shared<Crails::Params>();

    if (database->take(task_id, *data))
    {
      string task_type = (*data)["sidekix"]["type"];
      auto runner = sidetasks.find(task_type);

      if (runner == sidetasks.end())
        logger << Logger::Error << "/!\\ Scheduled task of unknown type `" << task_type << '`' << Logger::endl;
      else
        pool.push(std::bind(&run_task, task_type, runner->second, data, std::placeholders::_1));
    }
  }
}

void initialize_pid_file(const std::string& filepath)
{
  std::ofstream output(filepath.c_str());

  if (output.is_open())
  {
    pid_t pid = getpid();

    logger << ">> PID " << pid << " (stored in " << filepath << ')' << Logger::endl;
    output << pid;
    output.close();
  }
  else
    logger << "!! Failed to open PID file " << filepath << Logger::endl;
}

int main(int argc, const char** argv)
{
  ctpl::thread_pool taskpool(THREAD_POOL_SIZE);
  Sidekix::SideTaskDatabase* database;
  SingletonInstantiator<LogFiles, int, const char**> log_files(argc, argv);

  {
    using namespace boost;
    program_options::variables_map vm;
    program_options::options_description desc("Options");

    desc.add_options()
      ("log,l", program_options::value<std::string>(), "log output file")
      ("error,e", program_options::value<std::string>(), "error log output file")
      ("pidfile", program_options::value<std::string>(), "pid file");
    program_options::store(program_options::parse_command_line(argc, argv, desc), vm);
    program_options::notify(vm);
    if (vm.count("pidfile"))
      initialize_pid_file(vm["pidfile"].as<std::string>());
  }

  signal(SIGINT, &shutdown);
  database = Sidekix::SideTaskDatabase::instance();
  do {
    run_tasks(taskpool, database->pending_tasks());
    sleep(5);
  } while (should_continue == true);
}
