#include <csignal>
#include <functional>
#include <chrono>
#include <atomic>
#include <crails/params.hpp>
#include <crails/utils/timer.hpp>
#include <crails/logger.hpp>
#include <crails/sidekix.hpp>
#include <crails/log_files.hpp>
#include <crails/server.hpp>
#include <crails/session_store/no_session_store.hpp>
#include <boost/program_options.hpp>
#include <fstream>
#include <thread>
#ifdef _WIN32
# include <Windows.h>
#else
# include <unistd.h>
#endif
#include "ctpl.h"
#include "sidetasks.hpp"

#ifndef THREAD_POOL_SIZE
# define THREAD_POOL_SIZE 2
#endif

using namespace std;
using namespace Crails;

static unsigned int update_interval = 1000000;
static atomic_bool should_continue(true);

static void shutdown(int)
{
  Server::get_io_context().stop();
  should_continue = false;
}

static void run_task(const std::string& type, std::function<void(Params&)> runner, std::shared_ptr<Params> params, int id)
{
  try
  {
    Utils::Timer timer;

    logger << Logger::Info
      << "# Running task of type " << type << " in " << id << Logger::endl;
    runner(*params);
    logger << Logger::Info
      << "# Done (duration: " << timer.GetElapsedSeconds() << "s)"
      << Logger::endl;
  }
  catch (const std::exception& e)
  {
    logger << Logger::Error <<
      "[!] Catched exception: " << e.what() << Logger::endl;
  }
}

static void run_tasks(ctpl::thread_pool& pool, vector<string> tasks)
{
  auto data = std::make_shared<Crails::Params>();
  auto* database = Sidekix::SideTaskDatabase::instance();

  while (database->pop(*data))
  {
    string task_type = (*data)[Sidekix::task_type_param];
    auto runner = sidetasks.find(task_type);

    if (runner == sidetasks.end())
      logger << Logger::Error << "/!\\ Scheduled task of unknown type `" << task_type << '`' << Logger::endl;
    else
      pool.push(std::bind(&run_task, task_type, runner->second, data, std::placeholders::_1));
    data = std::make_shared<Crails::Params>();
  }
}

static void tasks_main()
{
  ctpl::thread_pool taskpool(THREAD_POOL_SIZE);
  Sidekix::SideTaskDatabase* database;

  database = Sidekix::SideTaskDatabase::instance();
  do {
    run_tasks(taskpool, database->pending_tasks());
    usleep(update_interval);
  } while (should_continue == true);
}

static void initialize_pid_file(const std::string& filepath)
{
  std::ofstream output(filepath.c_str());

  if (output.is_open())
  {
    pid_t pid = getpid();

    logger << Logger::Info << ">> PID " << pid << " (stored in " << filepath << ')' << Logger::endl;
    output << pid;
    output.close();
  }
  else
    logger << Logger::Error << "!! Failed to open PID file " << filepath << Logger::endl;
}

int main(int argc, const char** argv)
{
  SingletonInstantiator<LogFiles> log_files(argc, argv);
  SingletonInstantiator<NoSessionStore::Factory> empty_session_store;

  {
    using namespace boost;
    program_options::variables_map vm;
    program_options::options_description desc("Options");

    desc.add_options()
      ("log,l", program_options::value<std::string>(), "log output file")
      ("error,e", program_options::value<std::string>(), "error log output file")
      ("pidfile", program_options::value<std::string>(), "pid file")
      ("interval", program_options::value<unsigned short>(), "task pulling interval in microseconds");
    program_options::store(program_options::parse_command_line(argc, argv, desc), vm);
    program_options::notify(vm);
    if (vm.count("pidfile"))
      initialize_pid_file(vm["pidfile"].as<std::string>());
    if (vm.count("interval"))
      update_interval = vm["interval"].as<unsigned int>();
  }

  signal(SIGINT, &shutdown);
  signal(SIGTERM, &shutdown);
  std::thread task_thread(&tasks_main);
  Server::get_io_context().run();
  task_thread.join();
  return 0;
}
